from decimal import Decimal as _Decimal
from typing import Literal as _Literal, Sequence as _Sequence

_DecimalFormat = _Decimal | float | str | tuple[ int, _Sequence[ int ], int ]

class LongitudeLatitude:
    def __init__( self,
                  Longitude: _DecimalFormat = ...,
                  Latitude: _DecimalFormat = ... ) -> None:
        self.m_flLongitude: _Decimal = ...
        """X | Horizontal"""
        self.m_flLatitude: _Decimal = ...
        """Y | Vertical"""

    def __getitem__( self, Index: _Literal[ 0 ] | _Literal[ 1 ] ) -> _Decimal: ...
    def __setitem__( self, Index: _Literal[ 0 ] | _Literal[ 1 ], Value: str ) -> None: ...

    def Distance( self, Other: 'LongitudeLatitude', Diameter: _DecimalFormat = ... ) -> _Decimal: ...

    def __str__( self ) -> str: ...
    def __repr__( self ) -> str: ...

    def __Operator__( self, Other, Func ) -> 'LongitudeLatitude': ...
    def __ROperator__( self, Other, Func ) -> 'LongitudeLatitude': ...

    def __add__( self, Other ) -> 'LongitudeLatitude': ...
    def __sub__( self, Other ) -> 'LongitudeLatitude': ...
    def __mul__( self, Other ) -> 'LongitudeLatitude': ...
    def __pow__( self, Other ) -> 'LongitudeLatitude': ...
    def __mod__( self, Other ) -> 'LongitudeLatitude': ...
    def __truediv__( self, Other ) -> 'LongitudeLatitude': ...
    def __floordiv__( self, Other ) -> 'LongitudeLatitude': ...

    def __radd__( self, Other ) -> 'LongitudeLatitude': ...
    def __rsub__( self, Other ) -> 'LongitudeLatitude': ...
    def __rmul__( self, Other ) -> 'LongitudeLatitude': ...
    def __rpow__( self, Other ) -> 'LongitudeLatitude': ...
    def __rmod__( self, Other ) -> 'LongitudeLatitude': ...
    def __rtruediv__( self, Other ) -> 'LongitudeLatitude': ...
    def __rfloordiv__( self, Other ) -> 'LongitudeLatitude': ...